from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import re
from typing import List, Dict, Any

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# ----- C·∫•u h√¨nh c√°c case / keyword / response -----
# M·ªói case g·ªìm: type (equals|contains|startswith|regex), keywords (list), response (str or func)
CASES = [
    # 1. Ch√†o h·ªèi kh√°ch
    {
        "type": "contains",
        "keywords": ["xin ch√†o", "ch√†o", "hello", "hi"],
        "response": "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CoffeeShop! ‚òï B·∫°n mu·ªën u·ªëng g√¨ h√¥m nay?"
    },
    # 2. H·ªèi menu
    {
        "type": "contains",
        "keywords": ["menu", "th·ª±c ƒë∆°n"],
        "response": "Menu h√¥m nay: Espresso (40k), Latte (45k), Cappuccino (50k), Cold Brew (55k), Tr√† s·ªØa (35k)."
    },
    # 3. Gi·ªù m·ªü c·ª≠a
    {
        "type": "contains",
        "keywords": ["gi·ªù m·ªü c·ª≠a", "open time", "m·∫•y gi·ªù m·ªü"],
        "response": "Qu√°n m·ªü t·ª´ 7:00 s√°ng ƒë·∫øn 10:00 t·ªëi m·ªói ng√†y."
    },
    # 4. ƒê·ªãa ch·ªâ
    {
        "type": "contains",
        "keywords": ["ƒë·ªãa ch·ªâ", "·ªü ƒë√¢u", "location"],
        "response": "CoffeeShop ·ªü s·ªë 123 Nguy·ªÖn VƒÉn A, Qu·∫≠n 1, TP.HCM."
    },
    # 5. Wifi
    {
        "type": "contains",
        "keywords": ["wifi", "m·∫≠t kh·∫©u wifi", "wifi password"],
        "response": "Wi-Fi: CoffeeLovers ‚Äî Password: 12345678"
    },
    # 6. ƒê·∫∑t b√†n
    {
        "type": "contains",
        "keywords": ["ƒë·∫∑t b√†n", "reservation", "booking"],
        "response": "B·∫°n mu·ªën ƒë·∫∑t b√†n cho m·∫•y ng∆∞·ªùi v√† l√∫c m·∫•y gi·ªù?"
    },
    # 7. Order c√† ph√™
    {
        "type": "contains",
        "keywords": ["mua", "order", "g·ªçi", "cho m√¨nh"],
        "response": "B·∫°n mu·ªën order lo·∫°i ƒë·ªì u·ªëng n√†o? (v√≠ d·ª•: Latte, Espresso, Tr√† s·ªØa)"
    },
    # 8. Gi·∫£m gi√° / khuy·∫øn m√£i
    {
        "type": "contains",
        "keywords": ["khuy·∫øn m√£i", "gi·∫£m gi√°", "promotion", "∆∞u ƒë√£i"],
        "response": "H√¥m nay c√≥ ∆∞u ƒë√£i: Mua 2 Latte t·∫∑ng 1 b√°nh ng·ªçt üéâ"
    },
    # 9. Feedback
    {
        "type": "contains",
        "keywords": ["g√≥p √Ω", "feedback", "ph√†n n√†n", "ƒë√°nh gi√°"],
        "response": "C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω! B·∫°n vui l√≤ng ƒë·ªÉ l·∫°i ƒë√°nh gi√° chi ti·∫øt, ch√∫ng t√¥i s·∫Ω ghi nh·∫≠n."
    },
    # 10. Thanh to√°n
    {
        "type": "contains",
        "keywords": ["thanh to√°n", "payment", "tr·∫£ ti·ªÅn"],
        "response": "Qu√°n nh·∫≠n ti·ªÅn m·∫∑t, th·∫ª v√† v√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)."
    },

    # fallback
    {
        "type": "default",
        "response": "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi: 'menu', 'gi·ªù m·ªü c·ª≠a', 'wifi', 'ƒë·∫∑t b√†n'."
    }
]


# ----- H√†m x·ª≠ l√Ω keyword matching -----
def match_cases(msg: str) -> str:
    msg_lower = msg.lower().strip()
    for case in CASES:
        ctype = case.get("type", "contains")
        if ctype == "default":
            # x·ª≠ l√Ω ·ªü cu·ªëi n·∫øu ko kh·ªõp case n√†o
            continue
        if ctype == "equals":
            for kw in case.get("keywords", []):
                if msg_lower == kw.lower():
                    resp = case["response"]
                    return resp(msg_lower) if callable(resp) else resp
        elif ctype == "contains":
            for kw in case.get("keywords", []):
                if kw.lower() in msg_lower:
                    resp = case["response"]
                    return resp(msg_lower) if callable(resp) else resp
        elif ctype == "startswith":
            for kw in case.get("keywords", []):
                if msg_lower.startswith(kw.lower()):
                    resp = case["response"]
                    return resp(msg_lower) if callable(resp) else resp
        elif ctype == "regex":
            for pat in case.get("keywords", []):
                m = re.search(pat, msg_lower)
                if m:
                    resp = case["response"]
                    return resp(m) if callable(resp) else resp
        else:
            # unknown type -> skip
            continue

    # n·∫øu kh√¥ng kh·ªõp case n√†o, tr·∫£ default
    for case in CASES:
        if case.get("type") == "default":
            resp = case["response"]
            return resp if not callable(resp) else resp(msg_lower)
    return "M√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho c√¢u ƒë√≥."

# ----- Routes -----
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/chat")
async def chat_endpoint(payload: Dict[str, Any]):
    # payload expected: {"message": "..." }
    message = str(payload.get("message", "")).strip()
    if not message:
        return JSONResponse({"error": "empty message"}, status_code=400)
    answer = match_cases(message)
    return {"reply": answer, "original": message}
